name: Release

on:
  push:
    branches:
      - multi-build
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

permissions:
  contents: write

env:
  BINARY_NAME: rust-beam

jobs:
  build:
    name: Build package
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: macos
          - os: windows-latest
            platform: windows
        # os: [ubuntu-latest, macos-latest, windows-latest]
        # platform: [linux, macos, windows]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Build release
        run: cargo build --release
      - name: Package for homebrew
        if: matrix.config.os != 'windows-latest'
        run: tar -czvf ${{ env.BINARY_NAME }}-${{ github.ref_name }}-linux.tar.gz -C target/release ${{ env.BINARY_NAME }}

      - name: Upload windows artifact
        if: matrix.config.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BINARY_NAME }}-${{ github.ref_name }}-${{ matrix.config.platform }}.exe
          path: target/release/${{ env.BINARY_NAME }}.exe

      - name: Upload unix artifacts
        if: matrix.config.os != 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BINARY_NAME }}-${{ github.ref_name }}-${{ matrix.config.platform }}.tar.gz
          path: ${{ env.BINARY_NAME }}-${{ github.ref_name }}-${{ matrix.config.platform }}.tar.gz

  # build-linux:
  #   name: Build and Release for Linux
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         override: true
  #     - name: Build release
  #       run: cargo build --release
  #     - name: Package for homebrew
  #       run: tar -czvf ${{ env.BINARY_NAME }}-${{ github.ref_name }}-linux.tar.gz -C target/release ${{ env.BINARY_NAME }}
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ env.BINARY_NAME }}-${{ github.ref_name }}-linux.tar.gz
  #         path: ${{ env.BINARY_NAME }}-${{ github.ref_name }}-linux.tar.gz
  
  # build-macos:
  #   name: Build and Release for MacOS
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         override: true
  #     - name: Build release
  #       run: cargo build --release
  #     - name: Package for homebrew
  #       run: tar -czvf ${{ env.BINARY_NAME }}-${{ github.ref_name }}-macos.tar.gz -C target/release ${{ env.BINARY_NAME }}
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ env.BINARY_NAME }}-${{ github.ref_name }}-macos.tar.gz
  #         path: ${{ env.BINARY_NAME }}-${{ github.ref_name }}-macos.tar.gz
    
  # build-windows:
  #   name: Build and Release for Windows
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         override: true
  #     - name: Build release
  #       run: cargo build --release
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ env.BINARY_NAME }}-${{ github.ref_name }}-windows.exe
  #         path: target/release/${{ env.BINARY_NAME }}.exe

  # release:
  #   name: Release packages on Github
  #   runs-on: ubuntu-latest
  #   needs: 
  #     - build-linux
  #     - build-macos
  #     - build-windows
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v3
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: Release ${{ github.ref }}
  #         draft: false
  #         prerelease: false

  #     - name: Upload Linux Release Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ${{ github.workspace }}/${{ env.BINARY_NAME }}-${{ github.ref_name }}-linux.tar.gz/${{ env.BINARY_NAME }}-${{ github.ref_name }}-linux.tar.gz
  #         asset_name: ${{ env.BINARY_NAME }}-${{ github.ref_name }}-linux.tar.gz
  #         asset_content_type: application/gzip

  #     - name: Upload MacOS Release Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ${{ github.workspace }}/${{ env.BINARY_NAME }}-${{ github.ref_name }}-macos.tar.gz/${{ env.BINARY_NAME }}-${{ github.ref_name }}-macos.tar.gz
  #         asset_name: ${{ env.BINARY_NAME }}-${{ github.ref_name }}-macos.tar.gz
  #         asset_content_type: application/gzip

  #     - name: Upload Windows Release Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ${{ github.workspace }}/${{ env.BINARY_NAME }}-${{ github.ref_name }}-windows.exe/${{ env.BINARY_NAME }}.exe
  #         asset_name: ${{ env.BINARY_NAME }}-${{ github.ref_name }}-windows.exe
  #         asset_content_type: application/octet-stream
      